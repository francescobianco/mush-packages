#!/usr/bin/env bash
# @BP010: Release metadata
# @package: github-traffic
# @build_type: bin
# @build_with: Mush v0.2.0 (2025-05-02 develop)
# @build_date: 2025-05-04T16:47:51Z
set -e
use() { return 0; }
extern() { return 0; }
legacy() { return 0; }
module() { return 0; }
public() { return 0; }
embed() { return 0; }
inject() { return 0; }
## BP004: Compile the entrypoint
main () {
  local per_page
  local curl_user

  [ -f .env ] && source .env

  curl_user=${CURL_USER}

  if [ -z "$curl_user" ]; then
    echo "Missing token"
    exit 1
  fi

  per_page=${1:-100}

  user=$(git config --get remote.origin.url | cut -d: -f2 | cut -d/ -f4)

  cp README.md README.md.0
  echo "# ${user} (traffic)" > README.md
  echo "[![Traffic Update](https://github.com/javanile/github-traffic/actions/workflows/update.yml/badge.svg)](https://github.com/javanile/github-traffic/actions/workflows/update.yml)" >> README.md
  echo "![Last Update](https://img.shields.io/badge/Last%20Update-$(date -u +%Y--%m--%d%%20%H%%3A%M%%3A%S)%20UTC-blue)  " >> README.md
  echo "This file collects all information about the traffic to our repositories." >> README.md
  echo "" >> README.md
  ## Get the list of repositories
  echo "Fetch repositories list"
  rm -f repositories.0 > /dev/null 2>&1
  for page in {1..5}; do
    curl -s "https://api.github.com/users/${user}/repos?page=${page}&per_page=${per_page}" | grep '"full_name":' | cut -d'"' -f4 >> repositories.0
  done

  ## Repositories classifier
  echo "Scan for repositories traffic"
  if [ -s repositories.0 ]; then
    rm -f repositories.1 > /dev/null 2>&1
    while IFS="" read -r repository || [ -n "$repository" ]; do
      info=$(curl -s -u "$curl_user" "https://api.github.com/repos/${repository}")
      #echo "$info"
      default_branch=$(echo "$info" | grep '"default_branch":' | cut -d'"' -f4 | head -n1)
      warning=""
      [ "$default_branch" != "main" ] && warning="Problem with default branch"
      stars=$(echo "$info" | grep '"stargazers_count":' | sed 's/[^0-9]*//g' | head -n1)
      traffic=$(curl -s -u "$curl_user" "https://api.github.com/repos/${repository}/traffic/popular/referrers")
      uniques=$(echo '"uniques":0' "${traffic}" | grep '"uniques"' | sed 's/[^0-9]*//g' | paste -s -d+ - | bc)
      views=$(echo '"count":0' "${traffic}" | grep '"count"' | sed 's/[^0-9]*//g' | paste -s -d+ - | bc)
      sources=$(echo "$traffic" | grep '"count"' | wc -l | xargs)
      echo "$repository $uniques $views $sources $stars $warning" >> repositories.1
    done < repositories.0
  fi

  echo "Sort traffic data"
  if [ -s repositories.1 ]; then
    sort -t' ' -k2nr -k3nr -k4nr -k5nr -k1 repositories.1 > repositories.2
  fi

  if [ -s repositories.2 ]; then
    echo "Generating README.md file"
    echo '| Rank | Repository | Uniques | Views | Sources | Stars | Trend |' >> README.md
    echo '|:----:|------------|:-----:|:-------:|:-------:|:-----:|:-----:|' >> README.md
    rank=1
    while IFS="" read -r entry || [ -n "$entry" ]; do
      repository=$(echo "$entry" | cut -d' ' -f1)
      uniques=$(echo "$entry" | cut -d' ' -f2)
      views=$(echo "$entry" | cut -d' ' -f3)
      sources=$(echo "$entry" | cut -d' ' -f4)
      stars=$(echo "$entry" | cut -d' ' -f5)
      warning=$(echo "$entry" | cut -d' ' -f6-)
      last_rank=$(grep "\[$repository\]" README.md.0 | head -1 | cut -d'|' -f2 | xargs)
      trend=""
      if [ "${uniques}${views}${sources}" != "000" ]; then
        [ "$rank" -gt "$last_rank" ] && trend="🟥"
        [ "$rank" -lt "$last_rank" ] && trend="🟩"
      fi
      [ -n "${warning}" ] && warning="[⚠️](https://github.com/$repository \"$warning\")"
      echo "| $rank | [$repository](https://github.com/$repository) ${warning} | $uniques | $views | $sources | $stars | $trend |" >> README.md
      rank=$((rank+1))
    done < repositories.2
  fi

  echo "" >> README.md
  echo "## License" >> README.md
  echo "The MIT License (MIT). Please see [License File](LICENSE) for more information." >> README.md
}
## BP005: Execute the entrypoint
main "$@"
